def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.jd.flutter_component"
        minSdkVersion 21
        targetSdkVersion 28
        flavorDimensions flutterVersionCode
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    defaultConfig {
        ndk {
            abiFilters "x86", "armeabi-v7a"
        }
    }

//    productFlavors {
//        yingyongbao {}
//        xiaomi {}
//    }
//
//    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

    //签名
    signingConfigs {
        release {
            storeFile file('fast_keystore.jks')      //签名文件
            storePassword "123456"
            keyAlias "jd_key"
            keyPassword "123456"  //签名密码
        }
        debug {
            storeFile file('fast_keystore.jks')
            storePassword '123456'
            keyAlias = 'jd_key'
            keyPassword '123456'
        }
    }


    buildTypes {
        release {
           // minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release

            // 自定义打包输出配置
//            applicationVariants.all { variant ->
//                variant.outputs.all { output ->
//                    outputFileName = "jd_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
//                }
//            }

        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
